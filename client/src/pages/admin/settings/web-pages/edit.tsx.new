import React, { useEffect } from "react";
import { useLocation, useParams, useRouter } from "wouter";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { z } from "zod";
import { insertWebPageSchema } from "@shared/schema";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "@/hooks/use-toast";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { ArrowLeft, Save, Trash2, Eye } from "lucide-react";

import type { WebPage } from "@shared/schema";

// Schema per il form di modifica
const formSchema = insertWebPageSchema.extend({
  title: z.string().min(3, "Il titolo deve contenere almeno 3 caratteri").max(100, "Il titolo non può superare i 100 caratteri"),
  slug: z.string().min(3, "Lo slug deve contenere almeno 3 caratteri").max(100, "Lo slug non può superare i 100 caratteri")
    .regex(/^[a-z0-9-]+$/, "Lo slug può contenere solo lettere minuscole, numeri e trattini"),
  content: z.string().min(10, "Il contenuto deve contenere almeno 10 caratteri"),
  metaTitle: z.string().optional(),
  metaDescription: z.string().optional(),
  isHomepage: z.boolean().optional().default(false),
});

// Estrai i parametri dall'URL
type EditWebPageParams = {
  id: string;
};

export default function EditWebPage() {
  const [, navigate] = useRouter();
  const params = useParams<EditWebPageParams>();
  const pageId = params?.id ? parseInt(params.id) : null;
  
  // Configura il form
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      slug: "",
      content: "",
      metaTitle: "",
      metaDescription: "",
      type: "desktop",
      status: "draft",
      isHomepage: false,
    }
  });
  
  // Carica i dati della pagina corrente
  const { data: page, isLoading, error } = useQuery({
    queryKey: [`/api/admin/web-pages/${pageId}`],
    enabled: !!pageId,
    onSuccess: (data: WebPage) => {
      // Imposta i valori predefiniti del form con i dati caricati
      form.reset({
        title: data.title,
        slug: data.slug,
        content: data.content,
        metaTitle: data.metaTitle || "",
        metaDescription: data.metaDescription || "",
        type: data.type,
        status: data.status,
        isHomepage: data.isHomepage || false,
      });
    }
  });
  
  // Mutation per aggiornare la pagina
  const updateMutation = useMutation({
    mutationFn: async (data: z.infer<typeof formSchema>) => {
      const response = await fetch(`/api/admin/web-pages/${pageId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Si è verificato un errore durante l'aggiornamento della pagina");
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/web-pages"] });
      queryClient.invalidateQueries({ queryKey: [`/api/admin/web-pages/${pageId}`] });
      toast({
        title: "Pagina aggiornata",
        description: "La pagina è stata aggiornata con successo",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Errore",
        description: error.message || "Si è verificato un errore durante l'aggiornamento della pagina",
        variant: "destructive"
      });
    }
  });
  
  // Mutation per eliminare la pagina
  const deleteMutation = useMutation({
    mutationFn: async () => {
      const response = await fetch(`/api/admin/web-pages/${pageId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json"
        }
      });
      
      if (!response.ok) {
        throw new Error("Si è verificato un errore durante l'eliminazione della pagina");
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/web-pages"] });
      toast({
        title: "Pagina eliminata",
        description: "La pagina è stata eliminata con successo",
      });
      navigate("/admin/settings/web-pages");
    },
    onError: () => {
      toast({
        title: "Errore",
        description: "Si è verificato un errore durante l'eliminazione della pagina",
        variant: "destructive"
      });
    }
  });
  
  // Invia il form
  const onSubmit = (data: z.infer<typeof formSchema>) => {
    updateMutation.mutate(data);
  };
  
  // Elimina la pagina
  const handleDelete = () => {
    deleteMutation.mutate();
  };
  
  // Gestisce l'errore di caricamento
  if (error) {
    return (
      <div className="p-6">
        <h1 className="text-2xl font-bold text-red-500">Errore</h1>
        <p>Si è verificato un errore durante il caricamento della pagina.</p>
        <Button variant="outline" onClick={() => navigate("/admin/settings/web-pages")} className="mt-4">
          <ArrowLeft className="h-4 w-4 mr-2" /> Torna all'elenco
        </Button>
      </div>
    );
  }
  
  // Mostra il caricamento
  if (isLoading) {
    return (
      <div className="p-6">
        <h1 className="text-2xl font-bold">Caricamento...</h1>
        <p>Stiamo caricando i dati della pagina.</p>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          <Button variant="ghost" onClick={() => navigate("/admin/settings/web-pages")} className="mr-4">
            <ArrowLeft className="h-4 w-4 mr-2" /> Indietro
          </Button>
          <div>
            <h1 className="text-2xl font-bold">Modifica Pagina</h1>
            <p className="text-gray-500">Modifica i dettagli della pagina web</p>
          </div>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" asChild>
            <a href={`/${page?.type === 'mobile' ? 'mobile/' : ''}${page?.slug}`} target="_blank" rel="noopener noreferrer">
              <Eye className="h-4 w-4 mr-2" /> Visualizza
            </a>
          </Button>
          
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="destructive">
                <Trash2 className="h-4 w-4 mr-2" /> Elimina
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Conferma eliminazione</AlertDialogTitle>
                <AlertDialogDescription>
                  Sei sicuro di voler eliminare questa pagina? Questa azione non può essere annullata.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Annulla</AlertDialogCancel>
                <AlertDialogAction 
                  onClick={handleDelete}
                  className="bg-red-500 hover:bg-red-600"
                >
                  Elimina
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Dettagli Pagina</CardTitle>
              <CardDescription>
                Modifica le informazioni principali della pagina
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Titolo</FormLabel>
                      <FormControl>
                        <Input placeholder="Titolo della pagina" {...field} />
                      </FormControl>
                      <FormDescription>
                        Il titolo della pagina che verrà visualizzato
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="slug"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Slug</FormLabel>
                      <FormControl>
                        <Input placeholder="url-della-pagina" {...field} />
                      </FormControl>
                      <FormDescription>
                        L'URL della pagina (modifica con attenzione)
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="type"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Tipo di pagina</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Seleziona il tipo di pagina" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="desktop">Desktop</SelectItem>
                          <SelectItem value="mobile">Mobile</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        La versione del sito a cui appartiene questa pagina
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Stato</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Seleziona lo stato" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="draft">Bozza</SelectItem>
                          <SelectItem value="published">Pubblicato</SelectItem>
                          <SelectItem value="archived">Archiviato</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Solo le pagine pubblicate saranno visibili sul sito
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="isHomepage"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel className="text-base">Imposta come homepage</FormLabel>
                      <FormDescription>
                        Se attivato, questa pagina sarà l'homepage per il tipo selezionato (desktop o mobile)
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        disabled={form.getValues('status') !== 'published'}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="content"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Contenuto</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Inserisci il contenuto della pagina..." 
                        className="min-h-[200px]" 
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      Puoi utilizzare HTML per formattare il contenuto
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>SEO</CardTitle>
              <CardDescription>
                Informazioni per l'ottimizzazione nei motori di ricerca
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="metaTitle"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Meta Titolo</FormLabel>
                    <FormControl>
                      <Input placeholder="Meta titolo (opzionale)" {...field} />
                    </FormControl>
                    <FormDescription>
                      Il titolo che verrà mostrato nei motori di ricerca (se vuoto, verrà usato il titolo della pagina)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="metaDescription"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Meta Descrizione</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Meta descrizione (opzionale)" 
                        className="min-h-[100px]" 
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      La descrizione che verrà mostrata nei motori di ricerca
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            
            <CardFooter className="flex justify-between">
              <Button 
                variant="outline" 
                type="button" 
                onClick={() => navigate("/admin/settings/web-pages")}
              >
                Annulla
              </Button>
              <Button 
                type="submit" 
                disabled={updateMutation.isPending}
              >
                {updateMutation.isPending ? (
                  <span>Salvataggio in corso...</span>
                ) : (
                  <>
                    <Save className="mr-2 h-4 w-4" /> Salva Modifiche
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </form>
      </Form>
    </div>
  );
}